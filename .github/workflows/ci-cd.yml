name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Executar Testes
    runs-on: ubuntu-latest
    
    services:
      # Simula rede blockchain para testes
      ganache:
        image: trufflesuite/ganache:latest
        ports:
          - 8545:8545
        options: >-
          --health-cmd "curl -f http://localhost:8545 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependências Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio coverage
        
    - name: Configurar variáveis de ambiente para teste
      run: |
        cp .env.example .env
        echo "RPC_URL=http://localhost:8545" >> .env
        echo "PRIVATE_KEY=0x0000000000000000000000000000000000000000000000000000000000000001" >> .env
        echo "TELEGRAM_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ" >> .env
        echo "TELEGRAM_CHAT_ID=123456789" >> .env
        echo "AUTH0_DOMAIN=test.auth0.com" >> .env
        echo "AUTH0_AUDIENCE=https://api.test.com" >> .env
        echo "AUTH0_CLIENT_ID=test_client_id" >> .env
        echo "AUTH0_CLIENT_SECRET=test_client_secret" >> .env
        echo "DRY_RUN=true" >> .env
        
    - name: Executar testes unitários
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Executar testes de integração
      run: |
        python -m pytest tests/integration/ -v --timeout=60
        
    - name: Verificar qualidade do código
      run: |
        # Instalar ferramentas de qualidade
        pip install flake8 black isort mypy
        
        # Verificar formatação
        black --check .
        
        # Verificar imports
        isort --check-only .
        
        # Verificar lint
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Verificar tipos (opcional)
        # mypy . --ignore-missing-imports
        
    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Gerar relatório de cobertura
      run: |
        coverage report --show-missing
        
  security:
    name: Verificação de Segurança
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Instalar dependências de segurança
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Verificar vulnerabilidades em dependências
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Análise de segurança do código
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Análise estática avançada
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload relatórios de segurança
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
          
  build:
    name: Build e Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/sniper-bot:latest
          ${{ secrets.DOCKER_USERNAME }}/sniper-bot:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy para Render
      if: success()
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
          -H "Content-Type: application/json" \
          -d '{"ref": "main"}'
          
  notify:
    name: Notificações
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notificar sucesso no Telegram
      if: needs.build.result == 'success'
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "✅ Deploy realizado com sucesso!\n\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nAutor: ${{ github.actor }}",
            "parse_mode": "Markdown"
          }'
          
    - name: Notificar falha no Telegram
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "❌ Falha no pipeline CI/CD!\n\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nAutor: ${{ github.actor }}\n\nVerifique os logs para mais detalhes.",
            "parse_mode": "Markdown"
          }'

  performance:
    name: Testes de Performance
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
        
    - name: Executar testes de benchmark
      run: |
        python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
        
    - name: Executar testes de carga
      run: |
        # Simula carga no sistema
        python tests/load_test.py
        
    - name: Upload resultados de performance
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark.json
          load_test_results.json