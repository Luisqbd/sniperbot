"""
Bot do Telegram melhorado com todas as funcionalidades
Inclui bot√µes interativos, comandos avan√ßados e notifica√ß√µes
"""

import asyncio
import logging
import time
import datetime
import uuid
from typing import Dict, List, Optional

from telegram import (
    Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, 
    MessageHandler, ContextTypes, filters
)

from config import config
from advanced_sniper_strategy import advanced_sniper
from check_balance import get_wallet_status
from risk_manager import risk_manager
from security_checker import check_token_safety
from dex_aggregator import get_best_price
from utils import get_token_info, is_valid_address

logger = logging.getLogger(__name__)

class TelegramBot:
    """Bot do Telegram com funcionalidades avan√ßadas"""
    
    def __init__(self):
        self.token = config["TELEGRAM_TOKEN"]
        self.chat_id = config["TELEGRAM_CHAT_ID"]
        self.app = None
        self.bot = None
        self.is_running = False
        
        # Estados de conversa√ß√£o
        self.user_states: Dict[int, str] = {}
        self.temp_data: Dict[int, dict] = {}
        
    async def start_bot(self):
        """Inicia o bot do Telegram"""
        if self.is_running:
            return
            
        try:
            self.app = ApplicationBuilder().token(self.token).build()
            self.bot = self.app.bot
            
            # Registra handlers
            self._register_handlers()
            
            # Define comandos do bot
            await self._set_bot_commands()
            
            # Inicia polling
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            self.is_running = True
            logger.info("‚úÖ Bot do Telegram iniciado")
            
        except Exception as e:
            logger.error(f"‚ùå Erro iniciando bot: {e}")
            
    async def stop_bot(self):
        """Para o bot do Telegram"""
        if not self.is_running:
            return
            
        try:
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            self.is_running = False
            logger.info("üõë Bot do Telegram parado")
        except Exception as e:
            logger.error(f"‚ùå Erro parando bot: {e}")
            
    def _register_handlers(self):
        """Registra todos os handlers do bot"""
        # Comandos principais
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("balance", self.balance_command))
        self.app.add_handler(CommandHandler("positions", self.positions_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(CommandHandler("config", self.config_command))
        
        # Comandos de controle
        self.app.add_handler(CommandHandler("snipe", self.snipe_command))
        self.app.add_handler(CommandHandler("stop", self.stop_command))
        self.app.add_handler(CommandHandler("pause", self.pause_command))
        self.app.add_handler(CommandHandler("resume", self.resume_command))
        
        # Comandos de an√°lise
        self.app.add_handler(CommandHandler("analyze", self.analyze_command))
        self.app.add_handler(CommandHandler("check", self.check_token_command))
        self.app.add_handler(CommandHandler("price", self.price_command))
        
        # Comandos de configura√ß√£o
        self.app.add_handler(CommandHandler("set_trade_size", self.set_trade_size_command))
        self.app.add_handler(CommandHandler("set_stop_loss", self.set_stop_loss_command))
        self.app.add_handler(CommandHandler("set_take_profit", self.set_take_profit_command))
        self.app.add_handler(CommandHandler("set_max_positions", self.set_max_positions_command))
        
        # Comandos de relat√≥rio
        self.app.add_handler(CommandHandler("report", self.report_command))
        self.app.add_handler(CommandHandler("export", self.export_command))
        
        # Callback queries (bot√µes)
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        
        # Mensagens de texto
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
        
    async def _set_bot_commands(self):
        """Define comandos do bot no menu"""
        commands = [
            BotCommand("start", "üöÄ Iniciar bot e mostrar menu principal"),
            BotCommand("help", "üÜò Mostrar ajuda e comandos dispon√≠veis"),
            BotCommand("status", "üìä Status atual do bot e estrat√©gias"),
            BotCommand("balance", "üí∞ Saldo da carteira"),
            BotCommand("positions", "üéØ Posi√ß√µes ativas"),
            BotCommand("stats", "üìà Estat√≠sticas de performance"),
            BotCommand("snipe", "‚ñ∂Ô∏è Iniciar sniper autom√°tico"),
            BotCommand("stop", "‚èπÔ∏è Parar sniper"),
            BotCommand("analyze", "üîç Analisar token espec√≠fico"),
            BotCommand("check", "üõ°Ô∏è Verificar seguran√ßa de token"),
            BotCommand("price", "üí± Consultar pre√ßo de token"),
            BotCommand("config", "‚öôÔ∏è Configura√ß√µes do bot"),
            BotCommand("report", "üìã Relat√≥rio detalhado"),
        ]
        
        await self.bot.set_my_commands(commands)
        
    # ==================== COMANDOS PRINCIPAIS ====================
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        welcome_text = (
            "üéØ *SNIPER BOT ATIVO*\n\n"
            "Bot de sniper para memecoins e altcoins na rede Base\\.\n"
            "Use os bot√µes abaixo para controlar o bot:\n\n"
            "‚Ä¢ *Sniper autom√°tico* de novos tokens\n"
            "‚Ä¢ *An√°lise de seguran√ßa* avan√ßada\n"
            "‚Ä¢ *Take profit* em m√∫ltiplos n√≠veis\n"
            "‚Ä¢ *Stop loss* din√¢mico\n"
            "‚Ä¢ *Fallback* entre DEXs\n"
            "‚Ä¢ *Prote√ß√£o* contra honeypots"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='MarkdownV2',
            reply_markup=self._build_main_menu()
        )
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        help_text = (
            "üÜò *AJUDA DO SNIPER BOT*\n\n"
            "*COMANDOS PRINCIPAIS:*\n"
            "‚Ä¢ `/start` \\- Menu principal\n"
            "‚Ä¢ `/status` \\- Status do bot\n"
            "‚Ä¢ `/balance` \\- Saldo da carteira\n"
            "‚Ä¢ `/positions` \\- Posi√ß√µes ativas\n"
            "‚Ä¢ `/stats` \\- Estat√≠sticas\n\n"
            "*CONTROLE:*\n"
            "‚Ä¢ `/snipe` \\- Iniciar sniper\n"
            "‚Ä¢ `/stop` \\- Parar sniper\n"
            "‚Ä¢ `/pause` \\- Pausar temporariamente\n"
            "‚Ä¢ `/resume` \\- Retomar opera√ß√£o\n\n"
            "*AN√ÅLISE:*\n"
            "‚Ä¢ `/analyze <token>` \\- Analisar token\n"
            "‚Ä¢ `/check <token>` \\- Verificar seguran√ßa\n"
            "‚Ä¢ `/price <token>` \\- Consultar pre√ßo\n\n"
            "*CONFIGURA√á√ÉO:*\n"
            "‚Ä¢ `/config` \\- Mostrar configura√ß√µes\n"
            "‚Ä¢ `/set_trade_size <valor>` \\- Tamanho do trade\n"
            "‚Ä¢ `/set_stop_loss <valor>` \\- Stop loss \\(%\\)\n"
            "‚Ä¢ `/report` \\- Relat√≥rio completo\n\n"
            "*üöÄ MODO TURBO:*\n"
            "Use o bot√£o no menu principal para ativar/desativar\n"
            "‚Ä¢ Trading agressivo com mais velocidade\n"
            "‚Ä¢ Monitoramento a cada 50ms\n"
            "‚Ä¢ Maior risco e recompensa\n\n"
            "*SUPORTE:* @SniperBotSupport"
        )
        
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /status"""
        stats = advanced_sniper.get_performance_stats()
        
        status_text = (
            f"üìä *STATUS DO SNIPER BOT*\n\n"
            f"*Estado:* {'üü¢ Ativo' if advanced_sniper.is_running else 'üî¥ Parado'}\n"
            f"*Posi√ß√µes:* {stats['active_positions']}/{stats['max_positions']}\n"
            f"*Total Trades:* {stats['total_trades']}\n"
            f"*Taxa Acerto:* {stats['win_rate']:.1f}%\n"
            f"*Lucro Total:* {stats['total_profit']:.4f} ETH\n"
            f"*Melhor Trade:* {stats['best_trade']:.4f} ETH\n"
            f"*Uptime:* {stats['uptime_hours']:.1f}h\n\n"
            f"*√öltima Atualiza√ß√£o:* {datetime.datetime.now().strftime('%H:%M:%S')}"
        )
        
        await update.message.reply_text(
            status_text,
            parse_mode='MarkdownV2',
            reply_markup=self._build_status_menu()
        )
        
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /balance"""
        balance_info = get_wallet_status()
        await update.message.reply_text(balance_info, parse_mode='MarkdownV2')
        
    async def positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /positions"""
        positions = advanced_sniper.get_active_positions()
        
        if not positions:
            await update.message.reply_text("üì≠ Nenhuma posi√ß√£o ativa no momento")
            return
            
        positions_text = "*üéØ POSI√á√ïES ATIVAS:*\n\n"
        
        for pos in positions:
            age_hours = (time.time() - pos['entry_time']) / 3600
            positions_text += (
                f"*{pos['token_symbol']}*\n"
                f"‚Ä¢ Entrada: `{pos['entry_price']:.8f}` ETH\n"
                f"‚Ä¢ Atual: `{pos['current_price']:.8f}` ETH\n"
                f"‚Ä¢ PnL: `{pos['pnl_percentage']:+.1f}%`\n"
                f"‚Ä¢ Valor: `{pos['current_value']:.4f}` ETH\n"
                f"‚Ä¢ Idade: `{age_hours:.1f}h`\n"
                f"‚Ä¢ DEX: `{pos['dex_name']}`\n\n"
            )
            
        await update.message.reply_text(
            positions_text,
            parse_mode='MarkdownV2',
            reply_markup=self._build_positions_menu()
        )
        
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /stats"""
        stats = advanced_sniper.get_performance_stats()
        
        stats_text = (
            f"üìà *ESTAT√çSTICAS DE PERFORMANCE*\n\n"
            f"*Trades Totais:* {stats['total_trades']}\n"
            f"*Trades Vencedores:* {stats['winning_trades']}\n"
            f"*Taxa de Acerto:* {stats['win_rate']:.1f}%\n"
            f"*Lucro Total:* {stats['total_profit']:.4f} ETH\n"
            f"*Melhor Trade:* {stats['best_trade']:.4f} ETH\n"
            f"*Pior Trade:* {stats['worst_trade']:.4f} ETH\n"
            f"*Posi√ß√µes Ativas:* {stats['active_positions']}\n"
            f"*M√°x\\. Posi√ß√µes:* {stats['max_positions']}\n"
            f"*Tempo Ativo:* {stats['uptime_hours']:.1f}h\n\n"
            f"*ROI M√©dio:* {(stats['total_profit'] / (stats['total_trades'] * 0.001) * 100) if stats['total_trades'] > 0 else 0:.1f}%"
        )
        
        await update.message.reply_text(stats_text, parse_mode='MarkdownV2')
        
    # ==================== COMANDOS DE CONTROLE ====================
    
    async def snipe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /snipe"""
        if advanced_sniper.is_running:
            await update.message.reply_text("‚ö†Ô∏è Sniper j√° est√° ativo!")
            return
            
        try:
            await advanced_sniper.start_strategy()
            await update.message.reply_text(
                "üöÄ *Sniper iniciado com sucesso!*\n\n"
                "‚Ä¢ Monitoramento de mempool ativo\n"
                "‚Ä¢ Detec√ß√£o de memecoins habilitada\n"
                "‚Ä¢ Prote√ß√µes de seguran√ßa ativas\n"
                "‚Ä¢ Fallback entre DEXs configurado",
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro ao iniciar sniper: {e}")
            
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /stop"""
        if not advanced_sniper.is_running:
            await update.message.reply_text("‚ö†Ô∏è Sniper j√° est√° parado!")
            return
            
        try:
            await advanced_sniper.stop_strategy()
            await update.message.reply_text("üõë Sniper parado com sucesso!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro ao parar sniper: {e}")
            
    async def pause_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /pause"""
        if not advanced_sniper.is_running:
            await update.message.reply_text("‚ö†Ô∏è Sniper n√£o est√° ativo!")
            return
            
        # Para temporariamente mas mant√©m posi√ß√µes
        self.user_states[update.effective_user.id] = "paused"
        await update.message.reply_text(
            "‚è∏Ô∏è *SNIPER PAUSADO*\n\n"
            "‚Ä¢ Novas entradas desabilitadas\n"
            "‚Ä¢ Posi√ß√µes ativas continuam monitoradas\n"
            "‚Ä¢ Use `/resume` para retomar",
            parse_mode='MarkdownV2'
        )
        
    async def resume_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /resume"""
        user_id = update.effective_user.id
        if user_id in self.user_states and self.user_states[user_id] == "paused":
            del self.user_states[user_id]
            await update.message.reply_text(
                "‚ñ∂Ô∏è *SNIPER RETOMADO*\n\n"
                "‚Ä¢ Novas entradas habilitadas\n"
                "‚Ä¢ Monitoramento completo ativo",
                parse_mode='MarkdownV2'
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è Sniper n√£o est√° pausado!")
            
    # ==================== M√âTODOS AUXILIARES ====================
    
    async def _emergency_stop(self, query):
        """Para tudo imediatamente e fecha todas as posi√ß√µes"""
        try:
            # Para a estrat√©gia
            if advanced_sniper.is_running:
                await advanced_sniper.stop_strategy()
                
            # Fecha todas as posi√ß√µes
            positions = advanced_sniper.get_active_positions()
            if positions:
                for pos in positions:
                    try:
                        await advanced_sniper._execute_exit(pos, "PARADA DE EMERG√äNCIA")
                    except Exception as e:
                        logger.error(f"Erro fechando posi√ß√£o {pos.get('token_symbol', 'unknown')}: {e}")
                        
            await query.edit_message_text(
                "üö® *PARADA DE EMERG√äNCIA EXECUTADA*\n\n"
                "‚Ä¢ Sniper parado\n"
                "‚Ä¢ Todas as posi√ß√µes fechadas\n"
                "‚Ä¢ Sistema em modo seguro",
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.error(f"Erro na parada de emerg√™ncia: {e}")
            await query.edit_message_text(
                f"‚ùå Erro na parada de emerg√™ncia: {e}"
            )
        
    # ==================== COMANDOS DE AN√ÅLISE ====================
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /analyze <token>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/analyze <endere√ßo_do_token>`\n"
                "Exemplo: `/analyze 0x1234...`",
                parse_mode='MarkdownV2'
            )
            return
            
        token_address = context.args[0]
        
        if not is_valid_address(token_address):
            await update.message.reply_text("‚ùå Endere√ßo de token inv√°lido")
            return
            
        await update.message.reply_text("üîç Analisando token... Aguarde...")
        
        try:
            # Obt√©m informa√ß√µes do token
            token_info = await get_token_info(token_address)
            if not token_info:
                await update.message.reply_text("‚ùå N√£o foi poss√≠vel obter informa√ß√µes do token")
                return
                
            # Verifica seguran√ßa
            security_report = await check_token_safety(token_address)
            
            # Obt√©m pre√ßo
            price_quote = await get_best_price(
                token_in=token_address,
                token_out=config["WETH"],
                amount_in=int(1e18),
                is_buy=False
            )
            
            price_eth = price_quote.dex_quote.amount_out / 1e18 if price_quote else 0
            
            analysis_text = (
                f"üîç *AN√ÅLISE DO TOKEN*\n\n"
                f"*Nome:* {token_info.get('name', 'N/A')}\n"
                f"*S√≠mbolo:* {token_info.get('symbol', 'N/A')}\n"
                f"*Endere√ßo:* `{token_address[:10]}...{token_address[-6:]}`\n"
                f"*Pre√ßo:* {price_eth:.8f} ETH\n"
                f"*Supply:* {token_info.get('totalSupply', 0):,.0f}\n"
                f"*Holders:* {token_info.get('holders', 0):,}\n\n"
                f"*üõ°Ô∏è SEGURAN√áA:*\n"
                f"‚Ä¢ Status: {'‚úÖ Seguro' if security_report.is_safe else '‚ùå Arriscado'}\n"
                f"‚Ä¢ Score de Risco: {security_report.risk_score:.2f}/1\\.00\n"
                f"‚Ä¢ Honeypot: {security_report.honeypot_risk:.2f}/1\\.00\n"
                f"‚Ä¢ Rugpull: {security_report.rugpull_risk:.2f}/1\\.00\n"
            )
            
            if security_report.warnings:
                analysis_text += f"\n*‚ö†Ô∏è AVISOS:*\n"
                for warning in security_report.warnings:
                    analysis_text += f"‚Ä¢ {warning}\n"
                    
            await update.message.reply_text(analysis_text, parse_mode='MarkdownV2')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro na an√°lise: {e}")
            
    async def check_token_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /check <token>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/check <endere√ßo_do_token>`",
                parse_mode='MarkdownV2'
            )
            return
            
        token_address = context.args[0]
        
        if not is_valid_address(token_address):
            await update.message.reply_text("‚ùå Endere√ßo inv√°lido")
            return
            
        await update.message.reply_text("üõ°Ô∏è Verificando seguran√ßa... Aguarde...")
        
        try:
            security_report = await check_token_safety(token_address)
            
            status_emoji = "‚úÖ" if security_report.is_safe else "‚ùå"
            check_text = (
                f"üõ°Ô∏è *VERIFICA√á√ÉO DE SEGURAN√áA*\n\n"
                f"*Token:* `{token_address[:10]}...{token_address[-6:]}`\n"
                f"*Status:* {status_emoji} {'Seguro' if security_report.is_safe else 'Arriscado'}\n\n"
                f"*üìä SCORES DE RISCO:*\n"
                f"‚Ä¢ Geral: `{security_report.risk_score:.2f}/1.00`\n"
                f"‚Ä¢ Honeypot: `{security_report.honeypot_risk:.2f}/1.00`\n"
                f"‚Ä¢ Rugpull: `{security_report.rugpull_risk:.2f}/1.00`\n"
                f"‚Ä¢ Liquidez: `{security_report.liquidity_risk:.2f}/1.00`\n"
                f"‚Ä¢ Contrato: `{security_report.contract_risk:.2f}/1.00`\n"
            )
            
            if security_report.warnings:
                check_text += f"\n*‚ö†Ô∏è AVISOS:*\n"
                for warning in security_report.warnings:
                    check_text += f"‚Ä¢ {warning}\n"
                    
            await update.message.reply_text(check_text, parse_mode='MarkdownV2')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro na verifica√ß√£o: {e}")
            
    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /price <token>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/price <endere√ßo_do_token>`",
                parse_mode='MarkdownV2'
            )
            return
            
        token_address = context.args[0]
        
        if not is_valid_address(token_address):
            await update.message.reply_text("‚ùå Endere√ßo inv√°lido")
            return
            
        try:
            # Obt√©m cota√ß√£o de venda (1 token -> ETH)
            sell_quote = await get_best_price(
                token_in=token_address,
                token_out=config["WETH"],
                amount_in=int(1e18),
                is_buy=False
            )
            
            # Obt√©m cota√ß√£o de compra (0.001 ETH -> token)
            buy_quote = await get_best_price(
                token_in=config["WETH"],
                token_out=token_address,
                amount_in=int(0.001 * 1e18),
                is_buy=True
            )
            
            if not sell_quote or not buy_quote:
                await update.message.reply_text("‚ùå N√£o foi poss√≠vel obter cota√ß√£o")
                return
                
            sell_price = sell_quote.dex_quote.amount_out / 1e18
            buy_price = (0.001 * 1e18) / buy_quote.dex_quote.amount_out
            spread = ((buy_price - sell_price) / sell_price * 100) if sell_price > 0 else 0
            
            token_info = await get_token_info(token_address)
            symbol = token_info.get('symbol', 'TOKEN') if token_info else 'TOKEN'
            
            price_text = (
                f"üí± *COTA√á√ÉO DO TOKEN*\n\n"
                f"*Token:* {symbol}\n"
                f"*Endere√ßo:* `{token_address[:10]}...{token_address[-6:]}`\n\n"
                f"*üìà PRE√áOS:*\n"
                f"‚Ä¢ Venda: `{sell_price:.8f}` ETH\n"
                f"‚Ä¢ Compra: `{buy_price:.8f}` ETH\n"
                f"‚Ä¢ Spread: `{spread:.2f}%`\n\n"
                f"*üè™ MELHORES DEXs:*\n"
                f"‚Ä¢ Venda: {sell_quote.dex_quote.dex_name}\n"
                f"‚Ä¢ Compra: {buy_quote.dex_quote.dex_name}\n\n"
                f"*Atualizado:* {datetime.datetime.now().strftime('%H:%M:%S')}"
            )
            
            await update.message.reply_text(price_text, parse_mode='MarkdownV2')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro obtendo pre√ßo: {e}")
            
    # ==================== COMANDOS DE CONFIGURA√á√ÉO ====================
    
    async def config_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /config"""
        config_text = (
            f"‚öôÔ∏è *CONFIGURA√á√ïES ATUAIS*\n\n"
            f"*üí∞ TRADING:*\n"
            f"‚Ä¢ Trade Size: `{advanced_sniper.trade_size_eth}` ETH\n"
            f"‚Ä¢ Stop Loss: `{advanced_sniper.stop_loss_pct*100:.1f}%`\n"
            f"‚Ä¢ Trailing Stop: `{advanced_sniper.trailing_stop_pct*100:.1f}%`\n"
            f"‚Ä¢ Max Posi√ß√µes: `{advanced_sniper.max_positions}`\n\n"
            f"*üéØ TAKE PROFIT:*\n"
        )
        
        for i, level in enumerate(advanced_sniper.take_profit_levels, 1):
            config_text += f"‚Ä¢ N√≠vel {i}: `{level*100:.0f}%`\n"
            
        config_text += (
            f"\n*üîç MEMECOINS:*\n"
            f"‚Ä¢ Max Investimento: `{advanced_sniper.memecoin_config['max_investment']}` ETH\n"
            f"‚Ä¢ Target Lucro: `{advanced_sniper.memecoin_config['target_profit']}x`\n"
            f"‚Ä¢ Min Holders: `{advanced_sniper.memecoin_config['min_holders']}`\n"
            f"‚Ä¢ Max Idade: `{advanced_sniper.memecoin_config['max_age_hours']}h`\n\n"
            f"*üìä ALTCOINS:*\n"
            f"‚Ä¢ Min Market Cap: `${advanced_sniper.altcoin_config['min_market_cap']:,}`\n"
            f"‚Ä¢ Max Market Cap: `${advanced_sniper.altcoin_config['max_market_cap']:,}`\n"
            f"‚Ä¢ Min Volume 24h: `${advanced_sniper.altcoin_config['min_volume_24h']:,}`\n"
            f"‚Ä¢ Reinvestimento: `{advanced_sniper.altcoin_config['profit_reinvest_pct']*100:.0f}%`"
        )
        
        await update.message.reply_text(
            config_text,
            parse_mode='MarkdownV2',
            reply_markup=self._build_config_menu()
        )
        
    async def set_trade_size_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /set_trade_size <valor>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/set_trade_size <valor_em_eth>`\n"
                "Exemplo: `/set_trade_size 0.001`",
                parse_mode='MarkdownV2'
            )
            return
            
        try:
            new_size = float(context.args[0])
            if new_size <= 0 or new_size > 1:
                await update.message.reply_text("‚ùå Valor deve estar entre 0 e 1 ETH")
                return
                
            advanced_sniper.trade_size_eth = Decimal(str(new_size))
            await update.message.reply_text(
                f"‚úÖ Trade size alterado para `{new_size}` ETH",
                parse_mode='MarkdownV2'
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå Valor inv√°lido")
            
    async def set_stop_loss_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /set_stop_loss <valor>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/set_stop_loss <percentual>`\n"
                "Exemplo: `/set_stop_loss 15` \\(para 15%\\)",
                parse_mode='MarkdownV2'
            )
            return
            
        try:
            new_sl = float(context.args[0])
            if new_sl <= 0 or new_sl > 50:
                await update.message.reply_text("‚ùå Stop loss deve estar entre 0% e 50%")
                return
                
            advanced_sniper.stop_loss_pct = new_sl / 100
            await update.message.reply_text(
                f"‚úÖ Stop loss alterado para `{new_sl}%`",
                parse_mode='MarkdownV2'
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå Valor inv√°lido")
            
    async def set_take_profit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /set_take_profit <n√≠veis>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/set_take_profit <n√≠vel1> <n√≠vel2> <n√≠vel3> <n√≠vel4>`\n"
                "Exemplo: `/set_take_profit 25 50 100 200` \\(para 25%, 50%, 100%, 200%\\)",
                parse_mode='MarkdownV2'
            )
            return
            
        try:
            levels = [float(arg) / 100 for arg in context.args]
            if len(levels) != 4:
                await update.message.reply_text("‚ùå Deve fornecer exatamente 4 n√≠veis")
                return
                
            if any(level <= 0 or level > 10 for level in levels):
                await update.message.reply_text("‚ùå N√≠veis devem estar entre 0% e 1000%")
                return
                
            advanced_sniper.take_profit_levels = levels
            levels_text = ", ".join([f"{l*100:.0f}%" for l in levels])
            await update.message.reply_text(
                f"‚úÖ Take profit alterado para: `{levels_text}`",
                parse_mode='MarkdownV2'
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå Valores inv√°lidos")
            
    async def set_max_positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /set_max_positions <valor>"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå Uso: `/set_max_positions <n√∫mero>`\n"
                "Exemplo: `/set_max_positions 3`",
                parse_mode='MarkdownV2'
            )
            return
            
        try:
            new_max = int(context.args[0])
            if new_max <= 0 or new_max > 10:
                await update.message.reply_text("‚ùå M√°ximo de posi√ß√µes deve estar entre 1 e 10")
                return
                
            advanced_sniper.max_positions = new_max
            await update.message.reply_text(
                f"‚úÖ M√°ximo de posi√ß√µes alterado para `{new_max}`",
                parse_mode='MarkdownV2'
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå Valor inv√°lido")
            
    # ==================== COMANDOS DE RELAT√ìRIO ====================
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /report"""
        try:
            report = risk_manager.gerar_relatorio()
            await update.message.reply_text(report, parse_mode='MarkdownV2')
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro gerando relat√≥rio: {e}")
            
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /export"""
        await update.message.reply_text("üì§ Funcionalidade de exporta√ß√£o em desenvolvimento")
        
    # ==================== HANDLERS ====================
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para bot√µes inline"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        # Menu principal
        if data == "main_menu":
            await query.edit_message_text(
                "üéØ *SNIPER BOT ATIVO*\n\nUse os bot√µes abaixo:",
                parse_mode='MarkdownV2',
                reply_markup=self._build_main_menu()
            )
            
        elif data == "start_sniper":
            if not advanced_sniper.is_running:
                await advanced_sniper.start_strategy()
                await query.edit_message_text("üöÄ Sniper iniciado!")
            else:
                await query.edit_message_text("‚ö†Ô∏è Sniper j√° est√° ativo!")
                
        elif data == "stop_sniper":
            if advanced_sniper.is_running:
                await advanced_sniper.stop_strategy()
                await query.edit_message_text("üõë Sniper parado!")
            else:
                await query.edit_message_text("‚ö†Ô∏è Sniper j√° est√° parado!")
                
        elif data == "show_status":
            stats = advanced_sniper.get_performance_stats()
            status_text = (
                f"üìä *STATUS DO SNIPER BOT*\n\n"
                f"*Estado:* {'üü¢ Ativo' if advanced_sniper.is_running else 'üî¥ Parado'}\n"
                f"*Modo Turbo:* {'üöÄ ATIVO' if config.get('TURBO_MODE', False) else 'üê¢ Normal'}\n"
                f"*Posi√ß√µes:* {stats['active_positions']}/{stats['max_positions']}\n"
                f"*Total Trades:* {stats['total_trades']}\n"
                f"*Taxa Acerto:* {stats['win_rate']:.1f}%\n"
                f"*Lucro Total:* {stats['total_profit']:.4f} ETH\n"
                f"*Melhor Trade:* {stats['best_trade']:.4f} ETH"
            )
            await query.edit_message_text(
                status_text,
                parse_mode='MarkdownV2',
                reply_markup=self._build_status_menu()
            )
            
        elif data == "show_balance":
            balance_info = get_wallet_status()
            await query.edit_message_text(balance_info, parse_mode='MarkdownV2')
            
        elif data == "show_positions":
            positions = advanced_sniper.get_active_positions()
            if not positions:
                await query.edit_message_text("üì≠ Nenhuma posi√ß√£o ativa no momento")
            else:
                positions_text = "*üéØ POSI√á√ïES ATIVAS:*\n\n"
                for pos in positions:
                    age_hours = (time.time() - pos['entry_time']) / 3600
                    positions_text += (
                        f"*{pos['token_symbol']}*\n"
                        f"‚Ä¢ PnL: `{pos['pnl_percentage']:+.1f}%`\n"
                        f"‚Ä¢ Valor: `{pos['current_value']:.4f}` ETH\n"
                        f"‚Ä¢ Idade: `{age_hours:.1f}h`\n\n"
                    )
                await query.edit_message_text(
                    positions_text,
                    parse_mode='MarkdownV2',
                    reply_markup=self._build_positions_menu()
                )
            
        elif data == "show_stats":
            await self.stats_command(update, context)
            
        elif data == "show_config":
            config_text = (
                f"‚öôÔ∏è *CONFIGURA√á√ïES DO BOT*\n\n"
                f"*üí∞ TRADING:*\n"
                f"‚Ä¢ Trade Size: `{config['TRADE_SIZE_ETH']}` ETH\n"
                f"‚Ä¢ Take Profit: `{config['TAKE_PROFIT_PCT']*100:.0f}%`\n"
                f"‚Ä¢ Stop Loss: `{config['STOP_LOSS_PCT']*100:.0f}%`\n"
                f"‚Ä¢ Max Posi√ß√µes: `{advanced_sniper.max_positions}`\n"
                f"‚Ä¢ Modo Turbo: `{'‚úÖ Ativo' if config.get('TURBO_MODE', False) else '‚ùå Inativo'}`\n\n"
                f"*üîç MEMECOINS:*\n"
                f"‚Ä¢ Max Investimento: `{config.get('MEMECOIN_MAX_INVESTMENT', 0.0008)}` ETH\n"
                f"‚Ä¢ Target Lucro: `{config.get('MEMECOIN_TARGET_PROFIT', 2.0)}x`\n"
                f"‚Ä¢ Min Holders: `{config.get('MEMECOIN_MIN_HOLDERS', 50)}`"
            )
            await query.edit_message_text(
                config_text,
                parse_mode='MarkdownV2',
                reply_markup=self._build_config_menu()
            )
            
        # Configura√ß√µes espec√≠ficas
        elif data == "config_trade_size":
            await query.edit_message_text(
                "üí∞ *ALTERAR TRADE SIZE*\n\n"
                f"Valor atual: `{config['TRADE_SIZE_ETH']}` ETH\n\n"
                "Use o comando: `/set_trade_size <valor>`\n"
                "Exemplo: `/set_trade_size 0\\.001`",
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="show_config")
                ]])
            )
            
        elif data == "config_stop_loss":
            await query.edit_message_text(
                "üõ°Ô∏è *ALTERAR STOP LOSS*\n\n"
                f"Valor atual: `{config['STOP_LOSS_PCT']*100:.0f}%`\n\n"
                "Use o comando: `/set_stop_loss <percentual>`\n"
                "Exemplo: `/set_stop_loss 15`",
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="show_config")
                ]])
            )
            
        elif data == "config_take_profit":
            await query.edit_message_text(
                "üìà *ALTERAR TAKE PROFIT*\n\n"
                f"Valor atual: `{config['TAKE_PROFIT_PCT']*100:.0f}%`\n\n"
                "Use o comando: `/set_take_profit <n√≠veis>`\n"
                "Exemplo: `/set_take_profit 25 50 100 200`",
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="show_config")
                ]])
            )
            
        elif data == "config_max_positions":
            await query.edit_message_text(
                "üéØ *ALTERAR MAX POSI√á√ïES*\n\n"
                f"Valor atual: `{advanced_sniper.max_positions}`\n\n"
                "Use o comando: `/set_max_positions <n√∫mero>`\n"
                "Exemplo: `/set_max_positions 3`",
                parse_mode='MarkdownV2',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="show_config")
                ]])
            )
            
        # Modo Turbo
        elif data == "toggle_turbo":
            current_turbo = config.get("TURBO_MODE", False)
            config["TURBO_MODE"] = not current_turbo
            
            # Atualiza par√¢metros baseado no modo
            if config["TURBO_MODE"]:
                # Ativa modo turbo
                config["TRADE_SIZE_ETH"] = config.get("TURBO_TRADE_SIZE_ETH", 0.0012)
                config["TAKE_PROFIT_PCT"] = config.get("TURBO_TAKE_PROFIT_PCT", 0.5)
                config["STOP_LOSS_PCT"] = config.get("TURBO_STOP_LOSS_PCT", 0.08)
                config["MEMPOOL_MONITOR_INTERVAL"] = config.get("TURBO_MONITOR_INTERVAL", 0.05)
                advanced_sniper.max_positions = config.get("TURBO_MAX_POSITIONS", 3)
                status_msg = "üöÄ *MODO TURBO ATIVADO*\n\n‚ö°Ô∏è Trading agressivo ativado\nüî• Monitoramento acelerado\nüí∞ Maior risco/recompensa"
            else:
                # Volta ao modo normal
                config["TRADE_SIZE_ETH"] = 0.0008
                config["TAKE_PROFIT_PCT"] = 0.3
                config["STOP_LOSS_PCT"] = 0.12
                config["MEMPOOL_MONITOR_INTERVAL"] = 0.2
                advanced_sniper.max_positions = 2
                status_msg = "üê¢ *MODO NORMAL ATIVADO*\n\n‚úÖ Trading conservador\nüõ°Ô∏è Prote√ß√µes ativadas\nüíö Menor risco"
                
            await query.edit_message_text(
                status_msg,
                parse_mode='MarkdownV2',
                reply_markup=self._build_main_menu()
            )
            
        elif data == "emergency_stop":
            await self._emergency_stop(query)
            
        elif data == "ping":
            await query.edit_message_text(f"üèì Pong! {datetime.datetime.now().strftime('%H:%M:%S')}")
            
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para mensagens de texto"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # Verifica se usu√°rio est√° em algum estado de conversa√ß√£o
        if user_id in self.user_states:
            await self._handle_conversation_state(update, context, text)
        else:
            # Mensagem normal - pode implementar an√°lise autom√°tica de endere√ßos
            if text.startswith("0x") and len(text) == 42:
                await update.message.reply_text(
                    f"üîç Detectei um endere√ßo de token\\!\n"
                    f"Use `/analyze {text}` para an√°lise completa\\.",
                    parse_mode='MarkdownV2'
                )
                
    async def _handle_conversation_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """Lida com estados de conversa√ß√£o"""
        user_id = update.effective_user.id
        state = self.user_states.get(user_id)
        
        # Implementar estados de conversa√ß√£o conforme necess√°rio
        # Por exemplo: configura√ß√£o guiada, an√°lise interativa, etc.
        
    async def _emergency_stop(self, query):
        """Parada de emerg√™ncia"""
        try:
            await advanced_sniper.stop_strategy()
            await query.edit_message_text(
                "üö® *PARADA DE EMERG√äNCIA EXECUTADA*\n\n"
                "‚Ä¢ Sniper parado\n"
                "‚Ä¢ Monitoramento interrompido\n"
                "‚Ä¢ Posi√ß√µes mantidas\n\n"
                "Use /start para reiniciar",
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            await query.edit_message_text(f"‚ùå Erro na parada de emerg√™ncia: {e}")
            
    # ==================== MENUS ====================
    
    def _build_main_menu(self):
        """Constr√≥i menu principal"""
        turbo_status = "üöÄ TURBO ATIVO" if config.get("TURBO_MODE", False) else "üê¢ Modo Normal"
        keyboard = [
            [
                InlineKeyboardButton("üöÄ Iniciar Sniper", callback_data="start_sniper"),
                InlineKeyboardButton("üõë Parar Sniper", callback_data="stop_sniper")
            ],
            [
                InlineKeyboardButton("üìä Status", callback_data="show_status"),
                InlineKeyboardButton("üí∞ Saldo", callback_data="show_balance")
            ],
            [
                InlineKeyboardButton("üéØ Posi√ß√µes", callback_data="show_positions"),
                InlineKeyboardButton("üìà Estat√≠sticas", callback_data="show_stats")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="show_config"),
                InlineKeyboardButton(turbo_status, callback_data="toggle_turbo")
            ],
            [
                InlineKeyboardButton("üèì Ping", callback_data="ping")
            ],
            [
                InlineKeyboardButton("üö® PARADA DE EMERG√äNCIA", callback_data="emergency_stop")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    def _build_status_menu(self):
        """Constr√≥i menu de status"""
        keyboard = [
            [
                InlineKeyboardButton("üîÑ Atualizar", callback_data="show_status"),
                InlineKeyboardButton("üéØ Posi√ß√µes", callback_data="show_positions")
            ],
            [
                InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    def _build_positions_menu(self):
        """Constr√≥i menu de posi√ß√µes"""
        keyboard = [
            [
                InlineKeyboardButton("üîÑ Atualizar", callback_data="show_positions"),
                InlineKeyboardButton("üìà Stats", callback_data="show_stats")
            ],
            [
                InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    def _build_config_menu(self):
        """Constr√≥i menu de configura√ß√µes"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ Trade Size", callback_data="config_trade_size"),
                InlineKeyboardButton("üõ°Ô∏è Stop Loss", callback_data="config_stop_loss")
            ],
            [
                InlineKeyboardButton("üìà Take Profit", callback_data="config_take_profit"),
                InlineKeyboardButton("üéØ Max Posi√ß√µes", callback_data="config_max_positions")
            ],
            [
                InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    # ==================== NOTIFICA√á√ïES ====================
    
    async def send_alert(self, message: str, parse_mode: str = 'MarkdownV2'):
        """Envia alerta para o chat configurado"""
        try:
            if self.bot and self.chat_id:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.error(f"‚ùå Erro enviando alerta: {e}")

# Inst√¢ncia global
telegram_bot = TelegramBot()

async def start_telegram_bot():
    """Inicia bot do Telegram"""
    await telegram_bot.start_bot()
    
async def stop_telegram_bot():
    """Para bot do Telegram"""
    await telegram_bot.stop_bot()
    
async def send_telegram_alert(message: str):
    """Envia alerta via Telegram"""
    await telegram_bot.send_alert(message)