"""
Bot Sniper Principal - Vers√£o Completa e Otimizada
Integra todas as funcionalidades: mempool monitoring, security checks, DEX aggregation, Telegram bot
"""

import os
import sys
import signal
import logging
import asyncio
import time
import argparse
from threading import Thread
from functools import wraps

from flask import Flask, request, jsonify

# Importa√ß√µes condicionais para evitar erros
try:
    from web3 import Web3
    WEB3_AVAILABLE = True
except ImportError:
    WEB3_AVAILABLE = False
    Web3 = None

try:
    from telegram import Update
    from telegram.ext import ApplicationBuilder
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

from config import config
from advanced_sniper_strategy import advanced_sniper
from telegram_bot import telegram_bot, start_telegram_bot, stop_telegram_bot
from mempool_monitor import start_mempool_monitoring, stop_mempool_monitoring
from metrics import init_metrics_server
from utils import escape_md_v2

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s: %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("sniper_bot.log")
    ]
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
RPC_URL = config["RPC_URL"]
TELEGRAM_TOKEN = config["TELEGRAM_TOKEN"]
WEBHOOK_URL = config.get("WEBHOOK_URL", "")
PORT = int(os.getenv("PORT", 10000))

# Web3 connection
if WEB3_AVAILABLE:
    w3 = Web3(Web3.HTTPProvider(RPC_URL))
    if not w3.is_connected():
        logger.error("‚ùå RPC inacess√≠vel")
        w3 = None
else:
    w3 = None
    logger.warning("‚ö†Ô∏è Web3 n√£o dispon√≠vel - funcionalidades blockchain limitadas")

# Flask app para health checks e webhooks
app = Flask(__name__)

class SniperBot:
    """Classe principal do Sniper Bot"""
    
    def __init__(self):
        self.is_running = False
        self.start_time = time.time()
        self.components = {
            "advanced_sniper": False,
            "telegram_bot": False,
            "mempool_monitor": False,
            "metrics_server": False,
            "flask_server": False
        }
        
    async def start_all_components(self):
        """Inicia todos os componentes do bot"""
        logger.info("üöÄ Iniciando Sniper Bot...")
        
        try:
            # 1. Inicia servidor de m√©tricas
            await self._start_metrics_server()
            
            # 2. Inicia bot do Telegram
            await self._start_telegram_bot()
            
            # 3. Inicia estrat√©gia avan√ßada
            await self._start_advanced_strategy()
            
            # 4. Inicia monitoramento de mempool
            await self._start_mempool_monitoring()
            
            # 5. Inicia servidor Flask
            await self._start_flask_server()
            
            self.is_running = True
            logger.info("‚úÖ Todos os componentes iniciados com sucesso!")
            
            # Envia notifica√ß√£o de inicializa√ß√£o
            await self._send_startup_notification()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar componentes: {e}")
            await self.stop_all_components()
            raise
            
    async def stop_all_components(self):
        """Para todos os componentes do bot"""
        logger.info("üõë Parando Sniper Bot...")
        
        self.is_running = False
        
        # Para componentes em ordem reversa
        await self._stop_flask_server()
        await self._stop_mempool_monitoring()
        await self._stop_advanced_strategy()
        await self._stop_telegram_bot()
        await self._stop_metrics_server()
        
        logger.info("‚úÖ Todos os componentes parados")
        
    async def _start_metrics_server(self):
        """Inicia servidor de m√©tricas Prometheus"""
        try:
            init_metrics_server(8000)
            self.components["metrics_server"] = True
            logger.info("‚úÖ Servidor de m√©tricas iniciado na porta 8000")
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar m√©tricas: {e}")
            
    async def _start_telegram_bot(self):
        """Inicia bot do Telegram"""
        try:
            if TELEGRAM_AVAILABLE and TELEGRAM_TOKEN:
                await start_telegram_bot()
                self.components["telegram_bot"] = True
                logger.info("‚úÖ Bot do Telegram iniciado")
            else:
                logger.warning("‚ö†Ô∏è Telegram n√£o dispon√≠vel")
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar Telegram: {e}")
            
    async def _start_advanced_strategy(self):
        """Inicia estrat√©gia avan√ßada de sniper"""
        try:
            await advanced_sniper.start_strategy()
            self.components["advanced_sniper"] = True
            logger.info("‚úÖ Estrat√©gia avan√ßada iniciada")
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar estrat√©gia: {e}")
            
    async def _start_mempool_monitoring(self):
        """Inicia monitoramento de mempool"""
        try:
            asyncio.create_task(start_mempool_monitoring())
            self.components["mempool_monitor"] = True
            logger.info("‚úÖ Monitoramento de mempool iniciado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar mempool: {e}")
            
    async def _start_flask_server(self):
        """Inicia servidor Flask"""
        try:
            # Flask roda em thread separada
            flask_thread = Thread(target=self._run_flask_server, daemon=True)
            flask_thread.start()
            self.components["flask_server"] = True
            logger.info(f"‚úÖ Servidor Flask iniciado na porta {PORT}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar Flask: {e}")
            
    def _run_flask_server(self):
        """Executa servidor Flask"""
        app.run(host="0.0.0.0", port=PORT, debug=False)
        
    async def _stop_metrics_server(self):
        """Para servidor de m√©tricas"""
        if self.components["metrics_server"]:
            self.components["metrics_server"] = False
            logger.info("üõë Servidor de m√©tricas parado")
            
    async def _stop_telegram_bot(self):
        """Para bot do Telegram"""
        if self.components["telegram_bot"]:
            try:
                await stop_telegram_bot()
                self.components["telegram_bot"] = False
                logger.info("üõë Bot do Telegram parado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao parar Telegram: {e}")
                
    async def _stop_advanced_strategy(self):
        """Para estrat√©gia avan√ßada"""
        if self.components["advanced_sniper"]:
            try:
                await advanced_sniper.stop_strategy()
                self.components["advanced_sniper"] = False
                logger.info("üõë Estrat√©gia avan√ßada parada")
            except Exception as e:
                logger.error(f"‚ùå Erro ao parar estrat√©gia: {e}")
                
    async def _stop_mempool_monitoring(self):
        """Para monitoramento de mempool"""
        if self.components["mempool_monitor"]:
            try:
                await stop_mempool_monitoring()
                self.components["mempool_monitor"] = False
                logger.info("üõë Monitoramento de mempool parado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao parar mempool: {e}")
                
    async def _stop_flask_server(self):
        """Para servidor Flask"""
        if self.components["flask_server"]:
            self.components["flask_server"] = False
            logger.info("üõë Servidor Flask parado")
            
    async def _send_startup_notification(self):
        """Envia notifica√ß√£o de inicializa√ß√£o"""
        try:
            if self.components["telegram_bot"]:
                uptime = time.time() - self.start_time
                message = (
                    f"üöÄ *SNIPER BOT INICIADO*\n\n"
                    f"*Componentes Ativos:*\n"
                    f"‚Ä¢ Estrat√©gia Avan√ßada: {'‚úÖ' if self.components['advanced_sniper'] else '‚ùå'}\n"
                    f"‚Ä¢ Telegram Bot: {'‚úÖ' if self.components['telegram_bot'] else '‚ùå'}\n"
                    f"‚Ä¢ Mempool Monitor: {'‚úÖ' if self.components['mempool_monitor'] else '‚ùå'}\n"
                    f"‚Ä¢ M√©tricas: {'‚úÖ' if self.components['metrics_server'] else '‚ùå'}\n"
                    f"‚Ä¢ Flask Server: {'‚úÖ' if self.components['flask_server'] else '‚ùå'}\n\n"
                    f"*Configura√ß√µes:*\n"
                    f"‚Ä¢ Trade Size: `{config.get('TRADE_SIZE_ETH', 0.001)}` ETH\n"
                    f"‚Ä¢ Max Posi√ß√µes: `{config.get('MAX_POSITIONS', 3)}`\n"
                    f"‚Ä¢ Stop Loss: `{config.get('STOP_LOSS_PCT', 0.15)*100:.1f}%`\n"
                    f"‚Ä¢ Take Profit: `{config.get('TAKE_PROFIT_PCT', 0.25)*100:.1f}%`\n\n"
                    f"*Rede:* Base (Chain ID: {config.get('CHAIN_ID', 8453)})\n"
                    f"*Modo:* {'üß™ DRY RUN' if config.get('DRY_RUN', True) else 'üí∞ LIVE TRADING'}\n\n"
                    f"Bot pronto para operar\\! üéØ"
                )
                
                await telegram_bot.send_alert(message)
                
        except Exception as e:
            logger.error(f"‚ùå Erro enviando notifica√ß√£o: {e}")
            
    def get_status(self):
        """Retorna status dos componentes"""
        uptime = time.time() - self.start_time
        return {
            "is_running": self.is_running,
            "uptime_seconds": uptime,
            "components": self.components.copy(),
            "stats": advanced_sniper.get_performance_stats() if self.components["advanced_sniper"] else {},
            "web3_connected": w3.is_connected() if w3 else False,
            "config": {
                "chain_id": config.get("CHAIN_ID"),
                "trade_size_eth": config.get("TRADE_SIZE_ETH"),
                "max_positions": config.get("MAX_POSITIONS"),
                "dry_run": config.get("DRY_RUN")
            }
        }

# Inst√¢ncia global do bot
sniper_bot = SniperBot()

# ==================== FLASK ROUTES ====================

@app.route("/health")
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy" if sniper_bot.is_running else "starting",
        "timestamp": time.time(),
        "uptime": time.time() - sniper_bot.start_time
    })

@app.route("/status")
def status():
    """Status detalhado do bot"""
    return jsonify(sniper_bot.get_status())

@app.route("/metrics")
def metrics():
    """Endpoint de m√©tricas customizadas"""
    stats = advanced_sniper.get_performance_stats()
    return jsonify({
        "trading_metrics": stats,
        "system_metrics": {
            "uptime": time.time() - sniper_bot.start_time,
            "components_active": sum(sniper_bot.components.values()),
            "total_components": len(sniper_bot.components)
        }
    })

@app.route("/webhook", methods=["POST"])
def webhook():
    """Webhook para integra√ß√µes externas"""
    try:
        data = request.get_json()
        logger.info(f"Webhook recebido: {data}")
        
        # Processa webhook conforme necess√°rio
        # Por exemplo: alertas externos, sinais de trading, etc.
        
        return jsonify({"status": "received"})
    except Exception as e:
        logger.error(f"Erro processando webhook: {e}")
        return jsonify({"error": str(e)}), 400

@app.route("/emergency_stop", methods=["POST"])
def emergency_stop():
    """Parada de emerg√™ncia"""
    try:
        asyncio.create_task(sniper_bot.stop_all_components())
        return jsonify({"status": "emergency_stop_initiated"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ==================== SIGNAL HANDLERS ====================

def signal_handler(signum, frame):
    """Handler para sinais do sistema"""
    logger.info(f"Sinal recebido: {signum}")
    
    async def shutdown():
        await sniper_bot.stop_all_components()
        
    asyncio.create_task(shutdown())
    sys.exit(0)

# Registra handlers de sinal
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# ==================== MAIN FUNCTION ====================

async def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Sniper Bot para Base Network")
    parser.add_argument("--dry-run", action="store_true", help="Modo de teste (sem trades reais)")
    parser.add_argument("--config-file", help="Arquivo de configura√ß√£o customizado")
    parser.add_argument("--log-level", default="INFO", help="N√≠vel de log (DEBUG, INFO, WARNING, ERROR)")
    
    args = parser.parse_args()
    
    # Configura n√≠vel de log
    logging.getLogger().setLevel(getattr(logging, args.log_level.upper()))
    
    # Override dry run se especificado
    if args.dry_run:
        os.environ["DRY_RUN"] = "true"
        logger.info("üß™ Modo DRY RUN ativado via argumento")
    
    try:
        # Inicia todos os componentes
        await sniper_bot.start_all_components()
        
        # Mant√©m o bot rodando
        logger.info("üéØ Bot em execu√ß√£o. Pressione Ctrl+C para parar.")
        
        while sniper_bot.is_running:
            await asyncio.sleep(1)
            
            # Health check peri√≥dico
            if int(time.time()) % 300 == 0:  # A cada 5 minutos
                logger.info(f"üíì Health check - Uptime: {time.time() - sniper_bot.start_time:.0f}s")
                
    except KeyboardInterrupt:
        logger.info("üõë Interrup√ß√£o do usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
    finally:
        await sniper_bot.stop_all_components()

if __name__ == "__main__":
    # Verifica depend√™ncias cr√≠ticas
    if not WEB3_AVAILABLE:
        logger.error("‚ùå Web3 n√£o dispon√≠vel. Instale com: pip install web3")
        sys.exit(1)
        
    if not TELEGRAM_AVAILABLE:
        logger.warning("‚ö†Ô∏è Telegram n√£o dispon√≠vel. Bot funcionar√° sem notifica√ß√µes.")
    
    # Verifica configura√ß√µes cr√≠ticas
    required_configs = ["PRIVATE_KEY", "RPC_URL", "TELEGRAM_TOKEN"]
    missing_configs = [cfg for cfg in required_configs if not config.get(cfg)]
    
    if missing_configs:
        logger.error(f"‚ùå Configura√ß√µes obrigat√≥rias ausentes: {missing_configs}")
        logger.error("Configure as vari√°veis no arquivo .env")
        sys.exit(1)
    
    # Inicia o bot
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar: {e}")
        sys.exit(1)